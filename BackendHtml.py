# -*- coding: utf-8 -*-

import Backend
import datetime, pytz
import HumanTime
import osm.diff as osmdiff
import osm.changeset as oc
import operator
import logging
import jinja2
import tempfilewriter

logger = logging.getLogger(__name__)

class Backend(Backend.Backend):

    def __init__(self, globalconfig, subcfg):
        super(Backend, self).__init__(globalconfig, subcfg)
        self.list_fname = globalconfig.getpath('path', 'tracker')+'/'+subcfg['filename']
        self.template_name = subcfg['template']
        self.labels = subcfg.get('labels', None)
        self.title = subcfg.get('title', None)

        self.show_details = subcfg.get('show_details', True)
        self.show_comments = subcfg.get('show_comments', True)
        self.last_chg_seen = None
        self.last_update = datetime.datetime.now()

        self.env = jinja2.Environment(loader=jinja2.FileSystemLoader(globalconfig.getpath('template_path', 'tracker')),
                                      trim_blocks=True, lstrip_blocks=True)
        self.env.filters['js_datetime'] = self._js_datetime_filter
        self.env.filters['utc_datetime'] = self._utc_datetime_filter

    def _js_datetime_filter(self, value):
        '''Jinja2 filter formatting timestamps in format understood by javascript'''
            # See javascript date/time format: http://tools.ietf.org/html/rfc2822#page-14
        JS_TIMESTAMP_FMT = '%a, %d %b %Y %H:%M:%S %z'
        return value.strftime(JS_TIMESTAMP_FMT)

    def _utc_datetime_filter(self, value):
        TIMESTAMP_FMT = '%Y:%m:%d %H:%M:%S'
        return value.strftime(TIMESTAMP_FMT)

    def print_state(self, db):
        now = datetime.datetime.now()
        #if now.day != self.last_update.day:
        #    print('Cycler - new day: {} {}'.format(now.day, self.last_update.day))
        #period = now-state.cset_start_time
        #if period.total_seconds() > self.config.get('horizon_hours', 'tracker')*3600:
        #    os.rename(self.list_fname, self.list_fname_old)
        #    print('Cycler')
        #    state.clear_csets()
        self.last_update = datetime.datetime.now()
        if self.generation != db.generation:
            self.generation = db.generation

            template = self.env.get_template(self.template_name)
            ctx = { 'csets': [],
                    'csets_err': [],
                    'csetmeta': {},
                    'csetinfo': {},
                    'page_title': self.title,
                    'show_details': self.show_details,
                    'show_comments': self.show_comments }
            notes = 0
            csets_w_notes = 0
            csets_w_addr_changes = 0
            for c in db.chgsets_find(state=[db.STATE_CLOSED, db.STATE_OPEN, db.STATE_ANALYZING2,
                                            db.STATE_REANALYZING, db.STATE_DONE]):
                logger.debug('Cset={}'.format(c))
                logger.debug('Backend labels {}, cset labels {}'.format(self.labels, c['labels']))
                if self.labels and not set(c['labels']).intersection(self.labels):
                    continue
                cid = c['cid']
                ctx['csets'].append(c)
                info = db.chgset_get_info(cid)
                meta = db.chgset_get_meta(cid)
                ctx['csetmeta'][cid] = meta
                if info:
                    ctx['csetinfo'][cid] = info
                else:
                    logger.warn('No info for cid {}: {}'.format(cid, c))
                if meta['open'] or (info and 'truncated' in info['state']):
                    continue
                notecnt = int(meta['comments_count'])  # FIXME: This is duplicate w. BackendHtmlSummary.py
                if notecnt > 0:
                    notes += int(meta['comments_count'])
                    csets_w_notes += 1
                if c['state'] != db.STATE_DONE:
                    continue

                if 'address_node_changes' in c['labels']:
                    csets_w_addr_changes += 1
            ctx['csets_with_notes'] = csets_w_notes
            ctx['csets_with_addr_changes'] = csets_w_addr_changes
            logger.debug('Data passed to template: {}'.format(ctx))
            with tempfilewriter.TempFileWriter(self.list_fname) as f:
                f.write('<!-- Generated by OpenStreetMap Analytic Difference Engine -->\n')
                f.write(template.render(ctx))

    def no_items(self, state=None):
        if state:
            time = state.timestamp.strftime('%Y:%m:%d %H:%M:%S')
        else:
            time = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)
            time = time.strftime('%Y:%m:%d %H:%M:%S')
        return '<p>No changesets at '+time+' (UTC)</p>'
